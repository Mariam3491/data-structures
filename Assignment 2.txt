LIST MERGE(LIST1,LIST2)

#include <iostream>
#include <list>

int main() {
std::list<int> list1 = {1, 3, 5, 7};
std::list<int> list2 = {2, 4, 6, 8};

list1.merge(list2);

std::cout << "Merged List: ";
for (int num : list1) {
   std::cout << num << " ";
    }
   std::cout << std::endl;

    return 0;
}

swap two adjacent nodes by adjusting their positions using (1.single linked list , 2.double linked list)
 1 SINGLE LINKED LIST
#include <iostream>

struct Node {
    int data;
    Node* next;
    Node(int value) : data(value), next(nullptr) {}
};


void swapAdjacentNodes(Node*& head, int key) {
    if (!head || !head->next) return;

    Node* prev = nullptr, *curr = head;
    
    while (curr && curr->next) {
        if (curr->data == key) {
            Node* nextNode = curr->next;

            curr->next = nextNode->next;
            nextNode->next = curr;

 if (prev) {
    prev->next = nextNode;
    } else {
                head = nextNode;
            }
            return;
        }
        prev = curr;
        curr = curr->next;
    }
}


void printList(Node* head) {
    while (head) {
        std::cout << head->data << " -> ";
        head = head->next;
    }
    std::cout << "NULL\n";
}

int main() {
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);

    std::cout << "Original List: ";
    printList(head);

    swapAdjacentNodes(head, 2);

    std::cout << "After Swapping 2 and 3: ";
    printList(head);

    return 0;
}




2.DOUBLE LINKED LIST

#include <iostream>

struct Node {
    int data;
    Node* next;
    Node* prev;
    Node(int value) : data(value), next(nullptr), prev(nullptr) {}
};

void swapAdjacentNodes(Node*& head, int key) {
    if (!head || !head->next) return;

    Node* curr = head;

    while (curr && curr->next) {
        if (curr->data == key) {
            Node* nextNode = curr->next;

       if (curr->prev) {
                curr->prev->next = nextNode;
            } else {
                head = nextNode;  
            }

            if (nextNode->next) {
                nextNode->next->prev = curr;
            }

         
            curr->next = nextNode->next;
            nextNode->next = curr;

            nextNode->prev = curr->prev;
            curr->prev = nextNode;

            return;
        }
        curr = curr->next;
    }
}

void printList(Node* head) {
    while (head) {
        std::cout << head->data << " <-> ";
        head = head->next;
    }
    std::cout << "NULL\n";
}

int main() {
    Node* head = new Node(1);
    Node* second = new Node(2);
    Node* third = new Node(3);
    Node* fourth = new Node(4);

    head->next = second; second->prev = head;
    second->next = third; third->prev = second;
    third->next = fourth; fourth->prev = third;

    std::cout << "Original List: ";
    printList(head);

    swapAdjacentNodes(head, 2);

    std::cout << "After Swapping 2 and 3: ";
    printList(head);

    return 0;
}
